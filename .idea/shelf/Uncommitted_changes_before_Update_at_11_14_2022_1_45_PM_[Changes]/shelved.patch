Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># ClackProject\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision b46c788d2aa24632c5817b10b5d30661c658dfaf)
+++ b/README.md	(date 1666995758085)
@@ -1,1 +1,118 @@
 # ClackProject
+JavaDoc
+C:\Users\ethan\.jdks\openjdk-19.0.1\bin\java.exe "-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2022.2.3\lib\idea_rt.jar=60621:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2022.2.3\bin" -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8 -classpath C:\Users\ethan\IdeaProjects\ClackProject\out\production\ClackProject test.TestClackData
+messageClackData1 getType(): 2
+messageClackData2 getType(): 2
+messageClackData3 getType(): 2
+fileClackData1 getType(): 3
+fileClackData2 getType(): 3
+
+messageClackData1 getUserName(): Anon
+messageClackData2 getUserName(): testUser1
+messageClackData3 getUserName(): testuser2
+fileClackData1 getUserName(): Anon
+fileClackData2 getUserName(): testUser2
+
+messageClackData1 getDate(): Fri Oct 28 17:23:50 EDT 2022
+messageClackData2 getDate(): Fri Oct 28 17:23:50 EDT 2022
+messageClackData3 getDate(): Fri Oct 28 17:23:50 EDT 2022
+fileClackData1 getDate(): Fri Oct 28 17:23:50 EDT 2022
+fileClackData2 getDate(): Fri Oct 28 17:23:50 EDT 2022
+
+messageClackData1 getData(): 
+messageClackData2 getData(): testMessage
+messageClackData3 getData(): wsywwtj hnlg shgyduk
+fileClackData1 getData(): null
+fileClackData2 getData(): null
+
+messageClackData3 getData(String key): testing this message
+fileClackData2 getData(String key): 
+messageClackData1 hashCode(): -1492967841
+messageClackData2 hashCode(): 85351068
+messageClackData3 hashCode(): -150348415
+fileClackData1 hashCode(): 814117976
+fileClackData2 hashCode(): -1290349466
+
+messageClackData1 equals null: false
+messageClackData1 equals messageClackData1: true
+messageClackData1 equals messageClackData2: false
+messageClackData2 equals messageClackData1: false
+messageClackData3 equals messageClackData1: false
+messageClackData2 equals messageClackData3: false
+messageClackData1 equals fileClackData1: false
+fileClackData1 equals null: false
+fileClackData1 equals fileClackData1: true
+fileClackData1 equals fileClackData2: false
+fileClackData2 equals fileClackData1: false
+fileClackData1 equals messageClackData1: false
+
+messageClackData1:
+This instance of MessageClackData has the following properties:
+Username: Anon
+Type: 2
+Date: Fri Oct 28 17:23:50 EDT 2022
+Message: 
+
+messageClackData2:
+This instance of MessageClackData has the following properties:
+Username: testUser1
+Type: 2
+Date: Fri Oct 28 17:23:50 EDT 2022
+Message: testMessage
+
+messageClackData3:
+This instance of MessageClackData has the following properties:
+Username: testuser2
+Type: 2
+Date: Fri Oct 28 17:23:50 EDT 2022
+Message: wsywwtj hnlg shgyduk
+
+fileClackData1:
+This instance of FileClackData has the following properties:
+Username: Anon
+Type: 3
+Date: Fri Oct 28 17:23:50 EDT 2022
+File Name: 
+File Contents: null
+
+fileClackData2:
+This instance of FileClackData has the following properties:
+Username: testUser2
+Type: 3
+Date: Fri Oct 28 17:23:50 EDT 2022
+File Name: filename0
+File Contents: null
+
+
+fileClackData1 getFileName(): 
+fileClackData2 getFileName(): filename0
+
+Sets the filename of fileClackData1 to be filename1
+fileClackData1 getFileName(): filename1
+fileClackData1 hashCode(): -923900274
+fileClackData1 equals fileClackData1: true
+fileClackData1 equals fileClackData2: false
+fileClackData1:
+This instance of FileClackData has the following properties:
+Username: Anon
+Type: 3
+Date: Fri Oct 28 17:23:50 EDT 2022
+File Name: filename1
+File Contents: null
+
+
+Sets the filename of fileClackData2 to be filename2
+fileClackData2 getFileName(): filename2
+fileClackData2 hashCode(): -1290349404
+fileClackData2 equals fileClackData2: true
+fileClackData2 equals fileClackData1: false
+fileClackData2:
+This instance of FileClackData has the following properties:
+Username: testUser2
+Type: 3
+Date: Fri Oct 28 17:23:50 EDT 2022
+File Name: filename2
+File Contents: null
+
+
+Process finished with exit code 0
Index: src/data/ClackData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package data;\r\n\r\nimport java.util.Date;\r\n\r\n/**\r\n * Class ClackData is a superclass that represents the data sent between the client and the\r\n * server. An object of type ClackData consists of the username of the client user, the date\r\n * and time at which the data was sent and the data itself, which can either be a message\r\n * (MessageClackData) or the name and contents of a file (FileClackData). Note that ClackData\r\n * should not be instantiable.\r\n *\r\n * @author xinchaosong\r\n */\r\npublic abstract class ClackData {\r\n    /**\r\n     * For giving a listing of all users connected to this session.\r\n     */\r\n    public static final int CONSTANT_LISTUSERS = 0;\r\n\r\n    /**\r\n     * For logging out, i.e., close this client's connection.\r\n     */\r\n    public static final int CONSTANT_LOGOUT = 1;\r\n\r\n    /**\r\n     * For sending a message.\r\n     */\r\n    public static final int CONSTANT_SENDMESSAGE = 2;\r\n\r\n    /**\r\n     * For sending a file.\r\n     */\r\n    public static final int CONSTANT_SENDFILE = 3;\r\n\r\n    /**\r\n     * A string representing the name of the client user.\r\n     */\r\n    protected String userName;\r\n\r\n    /**\r\n     * An integer representing the kind of data exchanged between the client and the server.\r\n     */\r\n    protected int type;\r\n\r\n    /**\r\n     * A Date object representing the date and time when ClackData object is created.\r\n     */\r\n    protected Date date;\r\n\r\n    /**\r\n     * The constructor to set up the instance variable username and type.\r\n     * The instance variable date should be created automatically here.\r\n     *\r\n     * @param userName a string representing the name of the client user\r\n     * @param type     an int representing the data type\r\n     */\r\n    public ClackData(String userName, int type) {\r\n        this.userName = userName;\r\n        this.type = type;\r\n        this.date = new Date();\r\n    }\r\n\r\n    /**\r\n     * The constructor to create an anonymous user, whose name should be \"Anon\".\r\n     * This constructor should call another constructor.\r\n     *\r\n     * @param type an int representing the data type\r\n     */\r\n    public ClackData(int type) {\r\n        this(\"Anon\", type);\r\n    }\r\n\r\n    /**\r\n     * The default constructor.\r\n     * This constructor should call another constructor.\r\n     * type should get defaulted to CONSTANT_LOGOUT.\r\n     */\r\n    public ClackData() {\r\n        this(CONSTANT_LOGOUT);\r\n    }\r\n\r\n    /**\r\n     * Returns the type.\r\n     *\r\n     * @return this.type\r\n     */\r\n    public int getType() {\r\n        return this.type;\r\n    }\r\n\r\n    /**\r\n     * Returns the username.\r\n     *\r\n     * @return this.userName\r\n     */\r\n    public String getUserName() {\r\n        return this.userName;\r\n    }\r\n\r\n    /**\r\n     * Returns the date.\r\n     *\r\n     * @return this.date\r\n     */\r\n    public Date getDate() {\r\n        return this.date;\r\n    }\r\n\r\n    /**\r\n     * The abstract method to return the data contained in this class\r\n     * (contents of instant message or contents of a file).\r\n     *\r\n     * @return data\r\n     */\r\n    public abstract String getData();\r\n    protected String encrypt(String inputStringtoEncrypt, String key)\r\n    {\r\n        return \"booty\";\r\n    }\r\n    protected String decrypt(String inputStringtoDecrypt, String key)\r\n    {\r\n        return \"cheeks\";\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/data/ClackData.java b/src/data/ClackData.java
--- a/src/data/ClackData.java	(revision b46c788d2aa24632c5817b10b5d30661c658dfaf)
+++ b/src/data/ClackData.java	(date 1666995758086)
@@ -113,13 +113,66 @@
      * @return data
      */
     public abstract String getData();
-    protected String encrypt(String inputStringtoEncrypt, String key)
-    {
-        return "booty";
+    protected String encrypt( String inputStringtoEncrypt, String key ){
+        String resultString = "";
+        String alphabet = "abcdefghijklmnopqrstuvwxyz";
+        int ind = 0;
+
+        if(key == null){ key = "a"; }
+
+        if(inputStringtoEncrypt == null){ return ""; }
+
+        for(int i = 0; i < inputStringtoEncrypt.length(); i++){
+            String s = inputStringtoEncrypt.split("")[i];
+            int k = alphabet.indexOf(key.toLowerCase().split("")[ind % key.length()]);
+
+            if(alphabet.contains(s)){
+                resultString += alphabet.split("")[(alphabet.indexOf(s) + k) % 26];
+                ++ind;
+            } else if (alphabet.toUpperCase().contains(s)) {
+                resultString += alphabet.split("")[(alphabet.toUpperCase().indexOf(s) + k) % 26];
+                ++ind;
+            } else {
+                resultString += s;
+            }
+        }
+
+        return resultString;
     }
-    protected String decrypt(String inputStringtoDecrypt, String key)
-    {
-        return "cheeks";
+
+    protected String decrypt( String inputStringtoDecrypt, String key ){
+        String resultString = "";
+        String alphabet = "abcdefghijklmnopqrstuvwxyz";
+        int ind = 0;
+
+        if(key == null){ key = "a"; }
+
+        if(inputStringtoDecrypt == null){ return ""; }
+
+        for(int i = 0; i < inputStringtoDecrypt.length(); i++){
+            String s = inputStringtoDecrypt.split("")[i];
+            int k = alphabet.indexOf(key.toLowerCase().split("")[ind % key.length()]);
+
+            if(alphabet.contains(s)){
+                if(alphabet.indexOf(s) - k < 0){
+                    resultString += alphabet.split("")[26 + (alphabet.indexOf(s) - k)];
+                } else {
+                    resultString += alphabet.split("")[(alphabet.indexOf(s) - k) % 26];
+                }
+                ++ind;
+            } else if (alphabet.toUpperCase().contains(s)) {
+                if(alphabet.toUpperCase().indexOf(s) - k < 0){
+                    resultString += alphabet.toUpperCase().split("")[26 + (alphabet.toUpperCase().indexOf(s) - k)];
+                } else {
+                    resultString += alphabet.toUpperCase().split("")[(alphabet.toUpperCase().indexOf(s) - k) % 26];
+                }
+                ++ind;
+            } else {
+                resultString += s;
+            }
+        }
+
+        return resultString;
     }
 
 }
